#+HTML: <h1>WCB <sub><sub><sub>Webpack Config builder</sub></sub></sub></h1>
[[https://www.npmjs.org/package/wcb][file:https://img.shields.io/npm/v/wcb.svg?style=flat-square]]
[[https://travis-ci.org/jupl/wcb][file:https://img.shields.io/travis/jupl/wcb.svg?label=travis&style=flat-square]]
[[https://codecov.io/gh/jupl/wcb][file:https://img.shields.io/codecov/c/github/jupl/wcb.svg?style=flat-square]]
[[https://david-dm.org/jupl/wcb][file:https://img.shields.io/david/jupl/wcb.svg?style=flat-square]]
[[https://david-dm.org/jupl/wcb?type=peer][file:https://img.shields.io/david/peer/jupl/wcb.svg?style=flat-square]]
[[https://david-dm.org/jupl/wcb?type=dev][file:https://img.shields.io/david/dev/jupl/wcb.svg?style=flat-square]]

** About
Personal [[https://webpack.js.org/][Webpack]] config builder with support for [[https://babeljs.io/][Babel]].

** Installation
#+BEGIN_EXAMPLE
npm install wcb webpack
npm install @babel/core # Required for useBabel option
#+END_EXAMPLE

** TypeScript
TypeScript files will be picked up automatically for [[https://github.com/babel/babel-loader][babel-loader]] if Babel is used. If so make sure to use [[https://github.com/babel/babel/tree/master/packages/babel-preset-typescript][@babel/preset-typescript]].

** Usage
#+BEGIN_SRC typescript
import {addToEntries, createConfiguration} from 'wcb'
const base = createConfiguration()
const tweaked = createConfiguration({
  source: 'src',
  destination: 'dist',
  assets: 'assets',
})
const extra = addToEntries(createConfiguration({
  common: true,
  cssLoaders: [{test: /\.css$/, use: ['css-loader']],
}), [
  'dotenv/config',
])

// webpack.config.ts
import {createConfiguration} from 'wcb'
export default createConfiguration()
#+END_SRC

** API
*** ~createConfiguration(options?: Options): Configuration~
Create a [[https://webpack.js.org/concepts/configuration/][Webpack configuration]] which can be used by a =webpack.config= file.
*** ~addPlugins(configuration: Configuration, plugins: Plugin[]): Configuration~
Given an existing configuration from ~createConfiguration~, add [[https://webpack.js.org/concepts/plugins/][Webpack plugins]] easily. Please note that this will return a new configuration and does *not* modify the given configuration.
*** ~addRules(configuration: Configuration, rules: Rule[]): Configuration~
Given an existing configuration from ~createConfiguration~, add [[https://webpack.js.org/concepts/loaders/][Webpack rules for loaders]] easily. Please note that this will return a new configuration and does *not* modify the given configuration.
*** ~addToEntries(configuration: Configuration, modules: string[]): Configuration~
Given an existing configuration from ~createConfiguration~, load additional Node files to each entry. Please note that this will return a new configuration and does *not* modify the given configuration.

** Options
*** ~assets?: string~
Path that contains static files to copy over to the final build. If path is relative, it is relative to ~process.cwd()~. If not specified no static files are copied over.
*** ~assetsIgnore: string[] = pattern~
Glob patterns indicating files to ignore when using the ~assets~ option. By default it uses the ~pattern~ option.
*** ~cssLoaders: Loader[] = []~
List of CSS [[https://webpack.js.org/configuration/module/#rule][loaders]] to incorporate. =extract-text-webpack-plugin= is used by default, whereas =style-loader= is used for hot reloading. Do *NOT* use =extract-text-webpack-plugin= nor =style-loader= as it will automatically be included.
*** ~common: string | boolean = false~
If enabled then a single file containing [[https://webpack.js.org/plugins/commons-chunk-plugin/][common code across multiple entry points]] will be included. This option is only use if a non-Node ~target~ is chosen and there are multiple entries to build. If value is ~true~ then name of file is called "common", whereas a string value allows a custom filename.
*** ~destination: string = process.cwd()~
Path where generated JS files will be placed in final build. If path is relative, it is relative to ~process.cwd()~.
*** ~environment: string = process.env.NODE_ENV~
Environment to build under. Currently "development" and "production" is supported.
*** ~filename: string = '[name]'~
[[https://webpack.js.org/configuration/output/#output-filename][Output bundle filename structure]] for JS/CSS. This is useful for [[https://webpack.js.org/guides/caching/][caching]] strategies.
*** ~hotReload: boolean = process.env.HOT_MODULES === 'true'~
If enabled then [[https://webpack.js.org/concepts/hot-module-replacement/][Webpack hot reloading]] will be enabled.
*** ~log?: (message: string) => void~
If a function is provided it will be called for logging. Otherwise nothing is logged.
*** ~pattern: string[] = ['**/*.{j,t}s{,x}']~
Glob patterns to pick up as entry points relative to ~source~.
*** ~source: string = process.cwd()~
Path where source files will be used for building. If path is relative, it is relative to ~process.cwd()~.
*** ~target: string = 'web'~
[[https://webpack.js.org/configuration/target/][Webpack targets]] to build to.
*** ~useBabel: boolean = false~
If enabled then post-process files with Babel using [[https://github.com/babel/babel-loader][babel-loader]].
